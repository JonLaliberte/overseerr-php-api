<?php
/**
 * MovieDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Overseerr API
 *
 * This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.35
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * MovieDetails Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MovieDetails implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MovieDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'float',
'imdb_id' => 'string',
'adult' => 'bool',
'backdrop_path' => 'string',
'poster_path' => 'string',
'budget' => 'float',
'genres' => '\Swagger\Client\Model\Genre[]',
'homepage' => 'string',
'related_videos' => '\Swagger\Client\Model\RelatedVideo[]',
'original_language' => 'string',
'original_title' => 'string',
'overview' => 'string',
'popularity' => 'float',
'production_companies' => '\Swagger\Client\Model\ProductionCompany[]',
'production_countries' => '\Swagger\Client\Model\MovieDetailsProductionCountries[]',
'release_date' => 'string',
'releases' => '\Swagger\Client\Model\MovieDetailsReleases',
'revenue' => 'float',
'runtime' => 'float',
'spoken_languages' => '\Swagger\Client\Model\SpokenLanguage[]',
'status' => 'string',
'tagline' => 'string',
'title' => 'string',
'video' => 'bool',
'vote_average' => 'float',
'vote_count' => 'float',
'credits' => '\Swagger\Client\Model\MovieDetailsCredits',
'collection' => '\Swagger\Client\Model\MovieDetailsCollection',
'external_ids' => '\Swagger\Client\Model\ExternalIds',
'media_info' => '\Swagger\Client\Model\MediaInfo',
'watch_providers' => '\Swagger\Client\Model\WatchProviders[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'imdb_id' => null,
'adult' => null,
'backdrop_path' => null,
'poster_path' => null,
'budget' => null,
'genres' => null,
'homepage' => null,
'related_videos' => null,
'original_language' => null,
'original_title' => null,
'overview' => null,
'popularity' => null,
'production_companies' => null,
'production_countries' => null,
'release_date' => null,
'releases' => null,
'revenue' => null,
'runtime' => null,
'spoken_languages' => null,
'status' => null,
'tagline' => null,
'title' => null,
'video' => null,
'vote_average' => null,
'vote_count' => null,
'credits' => null,
'collection' => null,
'external_ids' => null,
'media_info' => null,
'watch_providers' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'imdb_id' => 'imdbId',
'adult' => 'adult',
'backdrop_path' => 'backdropPath',
'poster_path' => 'posterPath',
'budget' => 'budget',
'genres' => 'genres',
'homepage' => 'homepage',
'related_videos' => 'relatedVideos',
'original_language' => 'originalLanguage',
'original_title' => 'originalTitle',
'overview' => 'overview',
'popularity' => 'popularity',
'production_companies' => 'productionCompanies',
'production_countries' => 'productionCountries',
'release_date' => 'releaseDate',
'releases' => 'releases',
'revenue' => 'revenue',
'runtime' => 'runtime',
'spoken_languages' => 'spokenLanguages',
'status' => 'status',
'tagline' => 'tagline',
'title' => 'title',
'video' => 'video',
'vote_average' => 'voteAverage',
'vote_count' => 'voteCount',
'credits' => 'credits',
'collection' => 'collection',
'external_ids' => 'externalIds',
'media_info' => 'mediaInfo',
'watch_providers' => 'watchProviders'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'imdb_id' => 'setImdbId',
'adult' => 'setAdult',
'backdrop_path' => 'setBackdropPath',
'poster_path' => 'setPosterPath',
'budget' => 'setBudget',
'genres' => 'setGenres',
'homepage' => 'setHomepage',
'related_videos' => 'setRelatedVideos',
'original_language' => 'setOriginalLanguage',
'original_title' => 'setOriginalTitle',
'overview' => 'setOverview',
'popularity' => 'setPopularity',
'production_companies' => 'setProductionCompanies',
'production_countries' => 'setProductionCountries',
'release_date' => 'setReleaseDate',
'releases' => 'setReleases',
'revenue' => 'setRevenue',
'runtime' => 'setRuntime',
'spoken_languages' => 'setSpokenLanguages',
'status' => 'setStatus',
'tagline' => 'setTagline',
'title' => 'setTitle',
'video' => 'setVideo',
'vote_average' => 'setVoteAverage',
'vote_count' => 'setVoteCount',
'credits' => 'setCredits',
'collection' => 'setCollection',
'external_ids' => 'setExternalIds',
'media_info' => 'setMediaInfo',
'watch_providers' => 'setWatchProviders'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'imdb_id' => 'getImdbId',
'adult' => 'getAdult',
'backdrop_path' => 'getBackdropPath',
'poster_path' => 'getPosterPath',
'budget' => 'getBudget',
'genres' => 'getGenres',
'homepage' => 'getHomepage',
'related_videos' => 'getRelatedVideos',
'original_language' => 'getOriginalLanguage',
'original_title' => 'getOriginalTitle',
'overview' => 'getOverview',
'popularity' => 'getPopularity',
'production_companies' => 'getProductionCompanies',
'production_countries' => 'getProductionCountries',
'release_date' => 'getReleaseDate',
'releases' => 'getReleases',
'revenue' => 'getRevenue',
'runtime' => 'getRuntime',
'spoken_languages' => 'getSpokenLanguages',
'status' => 'getStatus',
'tagline' => 'getTagline',
'title' => 'getTitle',
'video' => 'getVideo',
'vote_average' => 'getVoteAverage',
'vote_count' => 'getVoteCount',
'credits' => 'getCredits',
'collection' => 'getCollection',
'external_ids' => 'getExternalIds',
'media_info' => 'getMediaInfo',
'watch_providers' => 'getWatchProviders'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['imdb_id'] = isset($data['imdb_id']) ? $data['imdb_id'] : null;
        $this->container['adult'] = isset($data['adult']) ? $data['adult'] : null;
        $this->container['backdrop_path'] = isset($data['backdrop_path']) ? $data['backdrop_path'] : null;
        $this->container['poster_path'] = isset($data['poster_path']) ? $data['poster_path'] : null;
        $this->container['budget'] = isset($data['budget']) ? $data['budget'] : null;
        $this->container['genres'] = isset($data['genres']) ? $data['genres'] : null;
        $this->container['homepage'] = isset($data['homepage']) ? $data['homepage'] : null;
        $this->container['related_videos'] = isset($data['related_videos']) ? $data['related_videos'] : null;
        $this->container['original_language'] = isset($data['original_language']) ? $data['original_language'] : null;
        $this->container['original_title'] = isset($data['original_title']) ? $data['original_title'] : null;
        $this->container['overview'] = isset($data['overview']) ? $data['overview'] : null;
        $this->container['popularity'] = isset($data['popularity']) ? $data['popularity'] : null;
        $this->container['production_companies'] = isset($data['production_companies']) ? $data['production_companies'] : null;
        $this->container['production_countries'] = isset($data['production_countries']) ? $data['production_countries'] : null;
        $this->container['release_date'] = isset($data['release_date']) ? $data['release_date'] : null;
        $this->container['releases'] = isset($data['releases']) ? $data['releases'] : null;
        $this->container['revenue'] = isset($data['revenue']) ? $data['revenue'] : null;
        $this->container['runtime'] = isset($data['runtime']) ? $data['runtime'] : null;
        $this->container['spoken_languages'] = isset($data['spoken_languages']) ? $data['spoken_languages'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['tagline'] = isset($data['tagline']) ? $data['tagline'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['video'] = isset($data['video']) ? $data['video'] : null;
        $this->container['vote_average'] = isset($data['vote_average']) ? $data['vote_average'] : null;
        $this->container['vote_count'] = isset($data['vote_count']) ? $data['vote_count'] : null;
        $this->container['credits'] = isset($data['credits']) ? $data['credits'] : null;
        $this->container['collection'] = isset($data['collection']) ? $data['collection'] : null;
        $this->container['external_ids'] = isset($data['external_ids']) ? $data['external_ids'] : null;
        $this->container['media_info'] = isset($data['media_info']) ? $data['media_info'] : null;
        $this->container['watch_providers'] = isset($data['watch_providers']) ? $data['watch_providers'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return float
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param float $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets imdb_id
     *
     * @return string
     */
    public function getImdbId()
    {
        return $this->container['imdb_id'];
    }

    /**
     * Sets imdb_id
     *
     * @param string $imdb_id imdb_id
     *
     * @return $this
     */
    public function setImdbId($imdb_id)
    {
        $this->container['imdb_id'] = $imdb_id;

        return $this;
    }

    /**
     * Gets adult
     *
     * @return bool
     */
    public function getAdult()
    {
        return $this->container['adult'];
    }

    /**
     * Sets adult
     *
     * @param bool $adult adult
     *
     * @return $this
     */
    public function setAdult($adult)
    {
        $this->container['adult'] = $adult;

        return $this;
    }

    /**
     * Gets backdrop_path
     *
     * @return string
     */
    public function getBackdropPath()
    {
        return $this->container['backdrop_path'];
    }

    /**
     * Sets backdrop_path
     *
     * @param string $backdrop_path backdrop_path
     *
     * @return $this
     */
    public function setBackdropPath($backdrop_path)
    {
        $this->container['backdrop_path'] = $backdrop_path;

        return $this;
    }

    /**
     * Gets poster_path
     *
     * @return string
     */
    public function getPosterPath()
    {
        return $this->container['poster_path'];
    }

    /**
     * Sets poster_path
     *
     * @param string $poster_path poster_path
     *
     * @return $this
     */
    public function setPosterPath($poster_path)
    {
        $this->container['poster_path'] = $poster_path;

        return $this;
    }

    /**
     * Gets budget
     *
     * @return float
     */
    public function getBudget()
    {
        return $this->container['budget'];
    }

    /**
     * Sets budget
     *
     * @param float $budget budget
     *
     * @return $this
     */
    public function setBudget($budget)
    {
        $this->container['budget'] = $budget;

        return $this;
    }

    /**
     * Gets genres
     *
     * @return \Swagger\Client\Model\Genre[]
     */
    public function getGenres()
    {
        return $this->container['genres'];
    }

    /**
     * Sets genres
     *
     * @param \Swagger\Client\Model\Genre[] $genres genres
     *
     * @return $this
     */
    public function setGenres($genres)
    {
        $this->container['genres'] = $genres;

        return $this;
    }

    /**
     * Gets homepage
     *
     * @return string
     */
    public function getHomepage()
    {
        return $this->container['homepage'];
    }

    /**
     * Sets homepage
     *
     * @param string $homepage homepage
     *
     * @return $this
     */
    public function setHomepage($homepage)
    {
        $this->container['homepage'] = $homepage;

        return $this;
    }

    /**
     * Gets related_videos
     *
     * @return \Swagger\Client\Model\RelatedVideo[]
     */
    public function getRelatedVideos()
    {
        return $this->container['related_videos'];
    }

    /**
     * Sets related_videos
     *
     * @param \Swagger\Client\Model\RelatedVideo[] $related_videos related_videos
     *
     * @return $this
     */
    public function setRelatedVideos($related_videos)
    {
        $this->container['related_videos'] = $related_videos;

        return $this;
    }

    /**
     * Gets original_language
     *
     * @return string
     */
    public function getOriginalLanguage()
    {
        return $this->container['original_language'];
    }

    /**
     * Sets original_language
     *
     * @param string $original_language original_language
     *
     * @return $this
     */
    public function setOriginalLanguage($original_language)
    {
        $this->container['original_language'] = $original_language;

        return $this;
    }

    /**
     * Gets original_title
     *
     * @return string
     */
    public function getOriginalTitle()
    {
        return $this->container['original_title'];
    }

    /**
     * Sets original_title
     *
     * @param string $original_title original_title
     *
     * @return $this
     */
    public function setOriginalTitle($original_title)
    {
        $this->container['original_title'] = $original_title;

        return $this;
    }

    /**
     * Gets overview
     *
     * @return string
     */
    public function getOverview()
    {
        return $this->container['overview'];
    }

    /**
     * Sets overview
     *
     * @param string $overview overview
     *
     * @return $this
     */
    public function setOverview($overview)
    {
        $this->container['overview'] = $overview;

        return $this;
    }

    /**
     * Gets popularity
     *
     * @return float
     */
    public function getPopularity()
    {
        return $this->container['popularity'];
    }

    /**
     * Sets popularity
     *
     * @param float $popularity popularity
     *
     * @return $this
     */
    public function setPopularity($popularity)
    {
        $this->container['popularity'] = $popularity;

        return $this;
    }

    /**
     * Gets production_companies
     *
     * @return \Swagger\Client\Model\ProductionCompany[]
     */
    public function getProductionCompanies()
    {
        return $this->container['production_companies'];
    }

    /**
     * Sets production_companies
     *
     * @param \Swagger\Client\Model\ProductionCompany[] $production_companies production_companies
     *
     * @return $this
     */
    public function setProductionCompanies($production_companies)
    {
        $this->container['production_companies'] = $production_companies;

        return $this;
    }

    /**
     * Gets production_countries
     *
     * @return \Swagger\Client\Model\MovieDetailsProductionCountries[]
     */
    public function getProductionCountries()
    {
        return $this->container['production_countries'];
    }

    /**
     * Sets production_countries
     *
     * @param \Swagger\Client\Model\MovieDetailsProductionCountries[] $production_countries production_countries
     *
     * @return $this
     */
    public function setProductionCountries($production_countries)
    {
        $this->container['production_countries'] = $production_countries;

        return $this;
    }

    /**
     * Gets release_date
     *
     * @return string
     */
    public function getReleaseDate()
    {
        return $this->container['release_date'];
    }

    /**
     * Sets release_date
     *
     * @param string $release_date release_date
     *
     * @return $this
     */
    public function setReleaseDate($release_date)
    {
        $this->container['release_date'] = $release_date;

        return $this;
    }

    /**
     * Gets releases
     *
     * @return \Swagger\Client\Model\MovieDetailsReleases
     */
    public function getReleases()
    {
        return $this->container['releases'];
    }

    /**
     * Sets releases
     *
     * @param \Swagger\Client\Model\MovieDetailsReleases $releases releases
     *
     * @return $this
     */
    public function setReleases($releases)
    {
        $this->container['releases'] = $releases;

        return $this;
    }

    /**
     * Gets revenue
     *
     * @return float
     */
    public function getRevenue()
    {
        return $this->container['revenue'];
    }

    /**
     * Sets revenue
     *
     * @param float $revenue revenue
     *
     * @return $this
     */
    public function setRevenue($revenue)
    {
        $this->container['revenue'] = $revenue;

        return $this;
    }

    /**
     * Gets runtime
     *
     * @return float
     */
    public function getRuntime()
    {
        return $this->container['runtime'];
    }

    /**
     * Sets runtime
     *
     * @param float $runtime runtime
     *
     * @return $this
     */
    public function setRuntime($runtime)
    {
        $this->container['runtime'] = $runtime;

        return $this;
    }

    /**
     * Gets spoken_languages
     *
     * @return \Swagger\Client\Model\SpokenLanguage[]
     */
    public function getSpokenLanguages()
    {
        return $this->container['spoken_languages'];
    }

    /**
     * Sets spoken_languages
     *
     * @param \Swagger\Client\Model\SpokenLanguage[] $spoken_languages spoken_languages
     *
     * @return $this
     */
    public function setSpokenLanguages($spoken_languages)
    {
        $this->container['spoken_languages'] = $spoken_languages;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets tagline
     *
     * @return string
     */
    public function getTagline()
    {
        return $this->container['tagline'];
    }

    /**
     * Sets tagline
     *
     * @param string $tagline tagline
     *
     * @return $this
     */
    public function setTagline($tagline)
    {
        $this->container['tagline'] = $tagline;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets video
     *
     * @return bool
     */
    public function getVideo()
    {
        return $this->container['video'];
    }

    /**
     * Sets video
     *
     * @param bool $video video
     *
     * @return $this
     */
    public function setVideo($video)
    {
        $this->container['video'] = $video;

        return $this;
    }

    /**
     * Gets vote_average
     *
     * @return float
     */
    public function getVoteAverage()
    {
        return $this->container['vote_average'];
    }

    /**
     * Sets vote_average
     *
     * @param float $vote_average vote_average
     *
     * @return $this
     */
    public function setVoteAverage($vote_average)
    {
        $this->container['vote_average'] = $vote_average;

        return $this;
    }

    /**
     * Gets vote_count
     *
     * @return float
     */
    public function getVoteCount()
    {
        return $this->container['vote_count'];
    }

    /**
     * Sets vote_count
     *
     * @param float $vote_count vote_count
     *
     * @return $this
     */
    public function setVoteCount($vote_count)
    {
        $this->container['vote_count'] = $vote_count;

        return $this;
    }

    /**
     * Gets credits
     *
     * @return \Swagger\Client\Model\MovieDetailsCredits
     */
    public function getCredits()
    {
        return $this->container['credits'];
    }

    /**
     * Sets credits
     *
     * @param \Swagger\Client\Model\MovieDetailsCredits $credits credits
     *
     * @return $this
     */
    public function setCredits($credits)
    {
        $this->container['credits'] = $credits;

        return $this;
    }

    /**
     * Gets collection
     *
     * @return \Swagger\Client\Model\MovieDetailsCollection
     */
    public function getCollection()
    {
        return $this->container['collection'];
    }

    /**
     * Sets collection
     *
     * @param \Swagger\Client\Model\MovieDetailsCollection $collection collection
     *
     * @return $this
     */
    public function setCollection($collection)
    {
        $this->container['collection'] = $collection;

        return $this;
    }

    /**
     * Gets external_ids
     *
     * @return \Swagger\Client\Model\ExternalIds
     */
    public function getExternalIds()
    {
        return $this->container['external_ids'];
    }

    /**
     * Sets external_ids
     *
     * @param \Swagger\Client\Model\ExternalIds $external_ids external_ids
     *
     * @return $this
     */
    public function setExternalIds($external_ids)
    {
        $this->container['external_ids'] = $external_ids;

        return $this;
    }

    /**
     * Gets media_info
     *
     * @return \Swagger\Client\Model\MediaInfo
     */
    public function getMediaInfo()
    {
        return $this->container['media_info'];
    }

    /**
     * Sets media_info
     *
     * @param \Swagger\Client\Model\MediaInfo $media_info media_info
     *
     * @return $this
     */
    public function setMediaInfo($media_info)
    {
        $this->container['media_info'] = $media_info;

        return $this;
    }

    /**
     * Gets watch_providers
     *
     * @return \Swagger\Client\Model\WatchProviders[]
     */
    public function getWatchProviders()
    {
        return $this->container['watch_providers'];
    }

    /**
     * Sets watch_providers
     *
     * @param \Swagger\Client\Model\WatchProviders[] $watch_providers watch_providers
     *
     * @return $this
     */
    public function setWatchProviders($watch_providers)
    {
        $this->container['watch_providers'] = $watch_providers;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
