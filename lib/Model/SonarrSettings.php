<?php
/**
 * SonarrSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Overseerr API
 *
 * This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.35
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SonarrSettings Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SonarrSettings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SonarrSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'float',
'name' => 'string',
'hostname' => 'string',
'port' => 'float',
'api_key' => 'string',
'use_ssl' => 'bool',
'base_url' => 'string',
'active_profile_id' => 'float',
'active_profile_name' => 'string',
'active_directory' => 'string',
'active_language_profile_id' => 'float',
'active_anime_profile_id' => 'float',
'active_anime_language_profile_id' => 'float',
'active_anime_profile_name' => 'string',
'active_anime_directory' => 'string',
'is4k' => 'bool',
'enable_season_folders' => 'bool',
'is_default' => 'bool',
'external_url' => 'string',
'sync_enabled' => 'bool',
'prevent_search' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'name' => null,
'hostname' => null,
'port' => null,
'api_key' => null,
'use_ssl' => null,
'base_url' => null,
'active_profile_id' => null,
'active_profile_name' => null,
'active_directory' => null,
'active_language_profile_id' => null,
'active_anime_profile_id' => null,
'active_anime_language_profile_id' => null,
'active_anime_profile_name' => null,
'active_anime_directory' => null,
'is4k' => null,
'enable_season_folders' => null,
'is_default' => null,
'external_url' => null,
'sync_enabled' => null,
'prevent_search' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'name' => 'name',
'hostname' => 'hostname',
'port' => 'port',
'api_key' => 'apiKey',
'use_ssl' => 'useSsl',
'base_url' => 'baseUrl',
'active_profile_id' => 'activeProfileId',
'active_profile_name' => 'activeProfileName',
'active_directory' => 'activeDirectory',
'active_language_profile_id' => 'activeLanguageProfileId',
'active_anime_profile_id' => 'activeAnimeProfileId',
'active_anime_language_profile_id' => 'activeAnimeLanguageProfileId',
'active_anime_profile_name' => 'activeAnimeProfileName',
'active_anime_directory' => 'activeAnimeDirectory',
'is4k' => 'is4k',
'enable_season_folders' => 'enableSeasonFolders',
'is_default' => 'isDefault',
'external_url' => 'externalUrl',
'sync_enabled' => 'syncEnabled',
'prevent_search' => 'preventSearch'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'name' => 'setName',
'hostname' => 'setHostname',
'port' => 'setPort',
'api_key' => 'setApiKey',
'use_ssl' => 'setUseSsl',
'base_url' => 'setBaseUrl',
'active_profile_id' => 'setActiveProfileId',
'active_profile_name' => 'setActiveProfileName',
'active_directory' => 'setActiveDirectory',
'active_language_profile_id' => 'setActiveLanguageProfileId',
'active_anime_profile_id' => 'setActiveAnimeProfileId',
'active_anime_language_profile_id' => 'setActiveAnimeLanguageProfileId',
'active_anime_profile_name' => 'setActiveAnimeProfileName',
'active_anime_directory' => 'setActiveAnimeDirectory',
'is4k' => 'setIs4k',
'enable_season_folders' => 'setEnableSeasonFolders',
'is_default' => 'setIsDefault',
'external_url' => 'setExternalUrl',
'sync_enabled' => 'setSyncEnabled',
'prevent_search' => 'setPreventSearch'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'name' => 'getName',
'hostname' => 'getHostname',
'port' => 'getPort',
'api_key' => 'getApiKey',
'use_ssl' => 'getUseSsl',
'base_url' => 'getBaseUrl',
'active_profile_id' => 'getActiveProfileId',
'active_profile_name' => 'getActiveProfileName',
'active_directory' => 'getActiveDirectory',
'active_language_profile_id' => 'getActiveLanguageProfileId',
'active_anime_profile_id' => 'getActiveAnimeProfileId',
'active_anime_language_profile_id' => 'getActiveAnimeLanguageProfileId',
'active_anime_profile_name' => 'getActiveAnimeProfileName',
'active_anime_directory' => 'getActiveAnimeDirectory',
'is4k' => 'getIs4k',
'enable_season_folders' => 'getEnableSeasonFolders',
'is_default' => 'getIsDefault',
'external_url' => 'getExternalUrl',
'sync_enabled' => 'getSyncEnabled',
'prevent_search' => 'getPreventSearch'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['hostname'] = isset($data['hostname']) ? $data['hostname'] : null;
        $this->container['port'] = isset($data['port']) ? $data['port'] : null;
        $this->container['api_key'] = isset($data['api_key']) ? $data['api_key'] : null;
        $this->container['use_ssl'] = isset($data['use_ssl']) ? $data['use_ssl'] : null;
        $this->container['base_url'] = isset($data['base_url']) ? $data['base_url'] : null;
        $this->container['active_profile_id'] = isset($data['active_profile_id']) ? $data['active_profile_id'] : null;
        $this->container['active_profile_name'] = isset($data['active_profile_name']) ? $data['active_profile_name'] : null;
        $this->container['active_directory'] = isset($data['active_directory']) ? $data['active_directory'] : null;
        $this->container['active_language_profile_id'] = isset($data['active_language_profile_id']) ? $data['active_language_profile_id'] : null;
        $this->container['active_anime_profile_id'] = isset($data['active_anime_profile_id']) ? $data['active_anime_profile_id'] : null;
        $this->container['active_anime_language_profile_id'] = isset($data['active_anime_language_profile_id']) ? $data['active_anime_language_profile_id'] : null;
        $this->container['active_anime_profile_name'] = isset($data['active_anime_profile_name']) ? $data['active_anime_profile_name'] : null;
        $this->container['active_anime_directory'] = isset($data['active_anime_directory']) ? $data['active_anime_directory'] : null;
        $this->container['is4k'] = isset($data['is4k']) ? $data['is4k'] : null;
        $this->container['enable_season_folders'] = isset($data['enable_season_folders']) ? $data['enable_season_folders'] : null;
        $this->container['is_default'] = isset($data['is_default']) ? $data['is_default'] : null;
        $this->container['external_url'] = isset($data['external_url']) ? $data['external_url'] : null;
        $this->container['sync_enabled'] = isset($data['sync_enabled']) ? $data['sync_enabled'] : null;
        $this->container['prevent_search'] = isset($data['prevent_search']) ? $data['prevent_search'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['hostname'] === null) {
            $invalidProperties[] = "'hostname' can't be null";
        }
        if ($this->container['port'] === null) {
            $invalidProperties[] = "'port' can't be null";
        }
        if ($this->container['api_key'] === null) {
            $invalidProperties[] = "'api_key' can't be null";
        }
        if ($this->container['use_ssl'] === null) {
            $invalidProperties[] = "'use_ssl' can't be null";
        }
        if ($this->container['active_profile_id'] === null) {
            $invalidProperties[] = "'active_profile_id' can't be null";
        }
        if ($this->container['active_profile_name'] === null) {
            $invalidProperties[] = "'active_profile_name' can't be null";
        }
        if ($this->container['active_directory'] === null) {
            $invalidProperties[] = "'active_directory' can't be null";
        }
        if ($this->container['is4k'] === null) {
            $invalidProperties[] = "'is4k' can't be null";
        }
        if ($this->container['enable_season_folders'] === null) {
            $invalidProperties[] = "'enable_season_folders' can't be null";
        }
        if ($this->container['is_default'] === null) {
            $invalidProperties[] = "'is_default' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return float
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param float $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets hostname
     *
     * @return string
     */
    public function getHostname()
    {
        return $this->container['hostname'];
    }

    /**
     * Sets hostname
     *
     * @param string $hostname hostname
     *
     * @return $this
     */
    public function setHostname($hostname)
    {
        $this->container['hostname'] = $hostname;

        return $this;
    }

    /**
     * Gets port
     *
     * @return float
     */
    public function getPort()
    {
        return $this->container['port'];
    }

    /**
     * Sets port
     *
     * @param float $port port
     *
     * @return $this
     */
    public function setPort($port)
    {
        $this->container['port'] = $port;

        return $this;
    }

    /**
     * Gets api_key
     *
     * @return string
     */
    public function getApiKey()
    {
        return $this->container['api_key'];
    }

    /**
     * Sets api_key
     *
     * @param string $api_key api_key
     *
     * @return $this
     */
    public function setApiKey($api_key)
    {
        $this->container['api_key'] = $api_key;

        return $this;
    }

    /**
     * Gets use_ssl
     *
     * @return bool
     */
    public function getUseSsl()
    {
        return $this->container['use_ssl'];
    }

    /**
     * Sets use_ssl
     *
     * @param bool $use_ssl use_ssl
     *
     * @return $this
     */
    public function setUseSsl($use_ssl)
    {
        $this->container['use_ssl'] = $use_ssl;

        return $this;
    }

    /**
     * Gets base_url
     *
     * @return string
     */
    public function getBaseUrl()
    {
        return $this->container['base_url'];
    }

    /**
     * Sets base_url
     *
     * @param string $base_url base_url
     *
     * @return $this
     */
    public function setBaseUrl($base_url)
    {
        $this->container['base_url'] = $base_url;

        return $this;
    }

    /**
     * Gets active_profile_id
     *
     * @return float
     */
    public function getActiveProfileId()
    {
        return $this->container['active_profile_id'];
    }

    /**
     * Sets active_profile_id
     *
     * @param float $active_profile_id active_profile_id
     *
     * @return $this
     */
    public function setActiveProfileId($active_profile_id)
    {
        $this->container['active_profile_id'] = $active_profile_id;

        return $this;
    }

    /**
     * Gets active_profile_name
     *
     * @return string
     */
    public function getActiveProfileName()
    {
        return $this->container['active_profile_name'];
    }

    /**
     * Sets active_profile_name
     *
     * @param string $active_profile_name active_profile_name
     *
     * @return $this
     */
    public function setActiveProfileName($active_profile_name)
    {
        $this->container['active_profile_name'] = $active_profile_name;

        return $this;
    }

    /**
     * Gets active_directory
     *
     * @return string
     */
    public function getActiveDirectory()
    {
        return $this->container['active_directory'];
    }

    /**
     * Sets active_directory
     *
     * @param string $active_directory active_directory
     *
     * @return $this
     */
    public function setActiveDirectory($active_directory)
    {
        $this->container['active_directory'] = $active_directory;

        return $this;
    }

    /**
     * Gets active_language_profile_id
     *
     * @return float
     */
    public function getActiveLanguageProfileId()
    {
        return $this->container['active_language_profile_id'];
    }

    /**
     * Sets active_language_profile_id
     *
     * @param float $active_language_profile_id active_language_profile_id
     *
     * @return $this
     */
    public function setActiveLanguageProfileId($active_language_profile_id)
    {
        $this->container['active_language_profile_id'] = $active_language_profile_id;

        return $this;
    }

    /**
     * Gets active_anime_profile_id
     *
     * @return float
     */
    public function getActiveAnimeProfileId()
    {
        return $this->container['active_anime_profile_id'];
    }

    /**
     * Sets active_anime_profile_id
     *
     * @param float $active_anime_profile_id active_anime_profile_id
     *
     * @return $this
     */
    public function setActiveAnimeProfileId($active_anime_profile_id)
    {
        $this->container['active_anime_profile_id'] = $active_anime_profile_id;

        return $this;
    }

    /**
     * Gets active_anime_language_profile_id
     *
     * @return float
     */
    public function getActiveAnimeLanguageProfileId()
    {
        return $this->container['active_anime_language_profile_id'];
    }

    /**
     * Sets active_anime_language_profile_id
     *
     * @param float $active_anime_language_profile_id active_anime_language_profile_id
     *
     * @return $this
     */
    public function setActiveAnimeLanguageProfileId($active_anime_language_profile_id)
    {
        $this->container['active_anime_language_profile_id'] = $active_anime_language_profile_id;

        return $this;
    }

    /**
     * Gets active_anime_profile_name
     *
     * @return string
     */
    public function getActiveAnimeProfileName()
    {
        return $this->container['active_anime_profile_name'];
    }

    /**
     * Sets active_anime_profile_name
     *
     * @param string $active_anime_profile_name active_anime_profile_name
     *
     * @return $this
     */
    public function setActiveAnimeProfileName($active_anime_profile_name)
    {
        $this->container['active_anime_profile_name'] = $active_anime_profile_name;

        return $this;
    }

    /**
     * Gets active_anime_directory
     *
     * @return string
     */
    public function getActiveAnimeDirectory()
    {
        return $this->container['active_anime_directory'];
    }

    /**
     * Sets active_anime_directory
     *
     * @param string $active_anime_directory active_anime_directory
     *
     * @return $this
     */
    public function setActiveAnimeDirectory($active_anime_directory)
    {
        $this->container['active_anime_directory'] = $active_anime_directory;

        return $this;
    }

    /**
     * Gets is4k
     *
     * @return bool
     */
    public function getIs4k()
    {
        return $this->container['is4k'];
    }

    /**
     * Sets is4k
     *
     * @param bool $is4k is4k
     *
     * @return $this
     */
    public function setIs4k($is4k)
    {
        $this->container['is4k'] = $is4k;

        return $this;
    }

    /**
     * Gets enable_season_folders
     *
     * @return bool
     */
    public function getEnableSeasonFolders()
    {
        return $this->container['enable_season_folders'];
    }

    /**
     * Sets enable_season_folders
     *
     * @param bool $enable_season_folders enable_season_folders
     *
     * @return $this
     */
    public function setEnableSeasonFolders($enable_season_folders)
    {
        $this->container['enable_season_folders'] = $enable_season_folders;

        return $this;
    }

    /**
     * Gets is_default
     *
     * @return bool
     */
    public function getIsDefault()
    {
        return $this->container['is_default'];
    }

    /**
     * Sets is_default
     *
     * @param bool $is_default is_default
     *
     * @return $this
     */
    public function setIsDefault($is_default)
    {
        $this->container['is_default'] = $is_default;

        return $this;
    }

    /**
     * Gets external_url
     *
     * @return string
     */
    public function getExternalUrl()
    {
        return $this->container['external_url'];
    }

    /**
     * Sets external_url
     *
     * @param string $external_url external_url
     *
     * @return $this
     */
    public function setExternalUrl($external_url)
    {
        $this->container['external_url'] = $external_url;

        return $this;
    }

    /**
     * Gets sync_enabled
     *
     * @return bool
     */
    public function getSyncEnabled()
    {
        return $this->container['sync_enabled'];
    }

    /**
     * Sets sync_enabled
     *
     * @param bool $sync_enabled sync_enabled
     *
     * @return $this
     */
    public function setSyncEnabled($sync_enabled)
    {
        $this->container['sync_enabled'] = $sync_enabled;

        return $this;
    }

    /**
     * Gets prevent_search
     *
     * @return bool
     */
    public function getPreventSearch()
    {
        return $this->container['prevent_search'];
    }

    /**
     * Sets prevent_search
     *
     * @param bool $prevent_search prevent_search
     *
     * @return $this
     */
    public function setPreventSearch($prevent_search)
    {
        $this->container['prevent_search'] = $prevent_search;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
