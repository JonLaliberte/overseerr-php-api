<?php
/**
 * NotificationAgentTypes
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Overseerr API
 *
 * This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.35
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * NotificationAgentTypes Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class NotificationAgentTypes implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'NotificationAgentTypes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'discord' => 'float',
'email' => 'float',
'pushbullet' => 'float',
'pushover' => 'float',
'slack' => 'float',
'telegram' => 'float',
'webhook' => 'float',
'webpush' => 'float'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'discord' => null,
'email' => null,
'pushbullet' => null,
'pushover' => null,
'slack' => null,
'telegram' => null,
'webhook' => null,
'webpush' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'discord' => 'discord',
'email' => 'email',
'pushbullet' => 'pushbullet',
'pushover' => 'pushover',
'slack' => 'slack',
'telegram' => 'telegram',
'webhook' => 'webhook',
'webpush' => 'webpush'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'discord' => 'setDiscord',
'email' => 'setEmail',
'pushbullet' => 'setPushbullet',
'pushover' => 'setPushover',
'slack' => 'setSlack',
'telegram' => 'setTelegram',
'webhook' => 'setWebhook',
'webpush' => 'setWebpush'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'discord' => 'getDiscord',
'email' => 'getEmail',
'pushbullet' => 'getPushbullet',
'pushover' => 'getPushover',
'slack' => 'getSlack',
'telegram' => 'getTelegram',
'webhook' => 'getWebhook',
'webpush' => 'getWebpush'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['discord'] = isset($data['discord']) ? $data['discord'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['pushbullet'] = isset($data['pushbullet']) ? $data['pushbullet'] : null;
        $this->container['pushover'] = isset($data['pushover']) ? $data['pushover'] : null;
        $this->container['slack'] = isset($data['slack']) ? $data['slack'] : null;
        $this->container['telegram'] = isset($data['telegram']) ? $data['telegram'] : null;
        $this->container['webhook'] = isset($data['webhook']) ? $data['webhook'] : null;
        $this->container['webpush'] = isset($data['webpush']) ? $data['webpush'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets discord
     *
     * @return float
     */
    public function getDiscord()
    {
        return $this->container['discord'];
    }

    /**
     * Sets discord
     *
     * @param float $discord discord
     *
     * @return $this
     */
    public function setDiscord($discord)
    {
        $this->container['discord'] = $discord;

        return $this;
    }

    /**
     * Gets email
     *
     * @return float
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param float $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets pushbullet
     *
     * @return float
     */
    public function getPushbullet()
    {
        return $this->container['pushbullet'];
    }

    /**
     * Sets pushbullet
     *
     * @param float $pushbullet pushbullet
     *
     * @return $this
     */
    public function setPushbullet($pushbullet)
    {
        $this->container['pushbullet'] = $pushbullet;

        return $this;
    }

    /**
     * Gets pushover
     *
     * @return float
     */
    public function getPushover()
    {
        return $this->container['pushover'];
    }

    /**
     * Sets pushover
     *
     * @param float $pushover pushover
     *
     * @return $this
     */
    public function setPushover($pushover)
    {
        $this->container['pushover'] = $pushover;

        return $this;
    }

    /**
     * Gets slack
     *
     * @return float
     */
    public function getSlack()
    {
        return $this->container['slack'];
    }

    /**
     * Sets slack
     *
     * @param float $slack slack
     *
     * @return $this
     */
    public function setSlack($slack)
    {
        $this->container['slack'] = $slack;

        return $this;
    }

    /**
     * Gets telegram
     *
     * @return float
     */
    public function getTelegram()
    {
        return $this->container['telegram'];
    }

    /**
     * Sets telegram
     *
     * @param float $telegram telegram
     *
     * @return $this
     */
    public function setTelegram($telegram)
    {
        $this->container['telegram'] = $telegram;

        return $this;
    }

    /**
     * Gets webhook
     *
     * @return float
     */
    public function getWebhook()
    {
        return $this->container['webhook'];
    }

    /**
     * Sets webhook
     *
     * @param float $webhook webhook
     *
     * @return $this
     */
    public function setWebhook($webhook)
    {
        $this->container['webhook'] = $webhook;

        return $this;
    }

    /**
     * Gets webpush
     *
     * @return float
     */
    public function getWebpush()
    {
        return $this->container['webpush'];
    }

    /**
     * Sets webpush
     *
     * @param float $webpush webpush
     *
     * @return $this
     */
    public function setWebpush($webpush)
    {
        $this->container['webpush'] = $webpush;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
