<?php
/**
 * PlexDevice
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Overseerr API
 *
 * This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.35
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PlexDevice Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PlexDevice implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PlexDevice';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
'product' => 'string',
'product_version' => 'string',
'platform' => 'string',
'platform_version' => 'string',
'device' => 'string',
'client_identifier' => 'string',
'created_at' => 'string',
'last_seen_at' => 'string',
'provides' => 'string[]',
'owned' => 'bool',
'owner_id' => 'string',
'home' => 'bool',
'source_title' => 'string',
'access_token' => 'string',
'public_address' => 'string',
'https_required' => 'bool',
'synced' => 'bool',
'relay' => 'bool',
'dns_rebinding_protection' => 'bool',
'nat_loopback_supported' => 'bool',
'public_address_matches' => 'bool',
'presence' => 'bool',
'connection' => '\Swagger\Client\Model\PlexConnection[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
'product' => null,
'product_version' => null,
'platform' => null,
'platform_version' => null,
'device' => null,
'client_identifier' => null,
'created_at' => null,
'last_seen_at' => null,
'provides' => null,
'owned' => null,
'owner_id' => null,
'home' => null,
'source_title' => null,
'access_token' => null,
'public_address' => null,
'https_required' => null,
'synced' => null,
'relay' => null,
'dns_rebinding_protection' => null,
'nat_loopback_supported' => null,
'public_address_matches' => null,
'presence' => null,
'connection' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
'product' => 'product',
'product_version' => 'productVersion',
'platform' => 'platform',
'platform_version' => 'platformVersion',
'device' => 'device',
'client_identifier' => 'clientIdentifier',
'created_at' => 'createdAt',
'last_seen_at' => 'lastSeenAt',
'provides' => 'provides',
'owned' => 'owned',
'owner_id' => 'ownerID',
'home' => 'home',
'source_title' => 'sourceTitle',
'access_token' => 'accessToken',
'public_address' => 'publicAddress',
'https_required' => 'httpsRequired',
'synced' => 'synced',
'relay' => 'relay',
'dns_rebinding_protection' => 'dnsRebindingProtection',
'nat_loopback_supported' => 'natLoopbackSupported',
'public_address_matches' => 'publicAddressMatches',
'presence' => 'presence',
'connection' => 'connection'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
'product' => 'setProduct',
'product_version' => 'setProductVersion',
'platform' => 'setPlatform',
'platform_version' => 'setPlatformVersion',
'device' => 'setDevice',
'client_identifier' => 'setClientIdentifier',
'created_at' => 'setCreatedAt',
'last_seen_at' => 'setLastSeenAt',
'provides' => 'setProvides',
'owned' => 'setOwned',
'owner_id' => 'setOwnerId',
'home' => 'setHome',
'source_title' => 'setSourceTitle',
'access_token' => 'setAccessToken',
'public_address' => 'setPublicAddress',
'https_required' => 'setHttpsRequired',
'synced' => 'setSynced',
'relay' => 'setRelay',
'dns_rebinding_protection' => 'setDnsRebindingProtection',
'nat_loopback_supported' => 'setNatLoopbackSupported',
'public_address_matches' => 'setPublicAddressMatches',
'presence' => 'setPresence',
'connection' => 'setConnection'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
'product' => 'getProduct',
'product_version' => 'getProductVersion',
'platform' => 'getPlatform',
'platform_version' => 'getPlatformVersion',
'device' => 'getDevice',
'client_identifier' => 'getClientIdentifier',
'created_at' => 'getCreatedAt',
'last_seen_at' => 'getLastSeenAt',
'provides' => 'getProvides',
'owned' => 'getOwned',
'owner_id' => 'getOwnerId',
'home' => 'getHome',
'source_title' => 'getSourceTitle',
'access_token' => 'getAccessToken',
'public_address' => 'getPublicAddress',
'https_required' => 'getHttpsRequired',
'synced' => 'getSynced',
'relay' => 'getRelay',
'dns_rebinding_protection' => 'getDnsRebindingProtection',
'nat_loopback_supported' => 'getNatLoopbackSupported',
'public_address_matches' => 'getPublicAddressMatches',
'presence' => 'getPresence',
'connection' => 'getConnection'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['product'] = isset($data['product']) ? $data['product'] : null;
        $this->container['product_version'] = isset($data['product_version']) ? $data['product_version'] : null;
        $this->container['platform'] = isset($data['platform']) ? $data['platform'] : null;
        $this->container['platform_version'] = isset($data['platform_version']) ? $data['platform_version'] : null;
        $this->container['device'] = isset($data['device']) ? $data['device'] : null;
        $this->container['client_identifier'] = isset($data['client_identifier']) ? $data['client_identifier'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['last_seen_at'] = isset($data['last_seen_at']) ? $data['last_seen_at'] : null;
        $this->container['provides'] = isset($data['provides']) ? $data['provides'] : null;
        $this->container['owned'] = isset($data['owned']) ? $data['owned'] : null;
        $this->container['owner_id'] = isset($data['owner_id']) ? $data['owner_id'] : null;
        $this->container['home'] = isset($data['home']) ? $data['home'] : null;
        $this->container['source_title'] = isset($data['source_title']) ? $data['source_title'] : null;
        $this->container['access_token'] = isset($data['access_token']) ? $data['access_token'] : null;
        $this->container['public_address'] = isset($data['public_address']) ? $data['public_address'] : null;
        $this->container['https_required'] = isset($data['https_required']) ? $data['https_required'] : null;
        $this->container['synced'] = isset($data['synced']) ? $data['synced'] : null;
        $this->container['relay'] = isset($data['relay']) ? $data['relay'] : null;
        $this->container['dns_rebinding_protection'] = isset($data['dns_rebinding_protection']) ? $data['dns_rebinding_protection'] : null;
        $this->container['nat_loopback_supported'] = isset($data['nat_loopback_supported']) ? $data['nat_loopback_supported'] : null;
        $this->container['public_address_matches'] = isset($data['public_address_matches']) ? $data['public_address_matches'] : null;
        $this->container['presence'] = isset($data['presence']) ? $data['presence'] : null;
        $this->container['connection'] = isset($data['connection']) ? $data['connection'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['product'] === null) {
            $invalidProperties[] = "'product' can't be null";
        }
        if ($this->container['product_version'] === null) {
            $invalidProperties[] = "'product_version' can't be null";
        }
        if ($this->container['platform'] === null) {
            $invalidProperties[] = "'platform' can't be null";
        }
        if ($this->container['device'] === null) {
            $invalidProperties[] = "'device' can't be null";
        }
        if ($this->container['client_identifier'] === null) {
            $invalidProperties[] = "'client_identifier' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['last_seen_at'] === null) {
            $invalidProperties[] = "'last_seen_at' can't be null";
        }
        if ($this->container['provides'] === null) {
            $invalidProperties[] = "'provides' can't be null";
        }
        if ($this->container['owned'] === null) {
            $invalidProperties[] = "'owned' can't be null";
        }
        if ($this->container['connection'] === null) {
            $invalidProperties[] = "'connection' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets product
     *
     * @return string
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param string $product product
     *
     * @return $this
     */
    public function setProduct($product)
    {
        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets product_version
     *
     * @return string
     */
    public function getProductVersion()
    {
        return $this->container['product_version'];
    }

    /**
     * Sets product_version
     *
     * @param string $product_version product_version
     *
     * @return $this
     */
    public function setProductVersion($product_version)
    {
        $this->container['product_version'] = $product_version;

        return $this;
    }

    /**
     * Gets platform
     *
     * @return string
     */
    public function getPlatform()
    {
        return $this->container['platform'];
    }

    /**
     * Sets platform
     *
     * @param string $platform platform
     *
     * @return $this
     */
    public function setPlatform($platform)
    {
        $this->container['platform'] = $platform;

        return $this;
    }

    /**
     * Gets platform_version
     *
     * @return string
     */
    public function getPlatformVersion()
    {
        return $this->container['platform_version'];
    }

    /**
     * Sets platform_version
     *
     * @param string $platform_version platform_version
     *
     * @return $this
     */
    public function setPlatformVersion($platform_version)
    {
        $this->container['platform_version'] = $platform_version;

        return $this;
    }

    /**
     * Gets device
     *
     * @return string
     */
    public function getDevice()
    {
        return $this->container['device'];
    }

    /**
     * Sets device
     *
     * @param string $device device
     *
     * @return $this
     */
    public function setDevice($device)
    {
        $this->container['device'] = $device;

        return $this;
    }

    /**
     * Gets client_identifier
     *
     * @return string
     */
    public function getClientIdentifier()
    {
        return $this->container['client_identifier'];
    }

    /**
     * Sets client_identifier
     *
     * @param string $client_identifier client_identifier
     *
     * @return $this
     */
    public function setClientIdentifier($client_identifier)
    {
        $this->container['client_identifier'] = $client_identifier;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets last_seen_at
     *
     * @return string
     */
    public function getLastSeenAt()
    {
        return $this->container['last_seen_at'];
    }

    /**
     * Sets last_seen_at
     *
     * @param string $last_seen_at last_seen_at
     *
     * @return $this
     */
    public function setLastSeenAt($last_seen_at)
    {
        $this->container['last_seen_at'] = $last_seen_at;

        return $this;
    }

    /**
     * Gets provides
     *
     * @return string[]
     */
    public function getProvides()
    {
        return $this->container['provides'];
    }

    /**
     * Sets provides
     *
     * @param string[] $provides provides
     *
     * @return $this
     */
    public function setProvides($provides)
    {
        $this->container['provides'] = $provides;

        return $this;
    }

    /**
     * Gets owned
     *
     * @return bool
     */
    public function getOwned()
    {
        return $this->container['owned'];
    }

    /**
     * Sets owned
     *
     * @param bool $owned owned
     *
     * @return $this
     */
    public function setOwned($owned)
    {
        $this->container['owned'] = $owned;

        return $this;
    }

    /**
     * Gets owner_id
     *
     * @return string
     */
    public function getOwnerId()
    {
        return $this->container['owner_id'];
    }

    /**
     * Sets owner_id
     *
     * @param string $owner_id owner_id
     *
     * @return $this
     */
    public function setOwnerId($owner_id)
    {
        $this->container['owner_id'] = $owner_id;

        return $this;
    }

    /**
     * Gets home
     *
     * @return bool
     */
    public function getHome()
    {
        return $this->container['home'];
    }

    /**
     * Sets home
     *
     * @param bool $home home
     *
     * @return $this
     */
    public function setHome($home)
    {
        $this->container['home'] = $home;

        return $this;
    }

    /**
     * Gets source_title
     *
     * @return string
     */
    public function getSourceTitle()
    {
        return $this->container['source_title'];
    }

    /**
     * Sets source_title
     *
     * @param string $source_title source_title
     *
     * @return $this
     */
    public function setSourceTitle($source_title)
    {
        $this->container['source_title'] = $source_title;

        return $this;
    }

    /**
     * Gets access_token
     *
     * @return string
     */
    public function getAccessToken()
    {
        return $this->container['access_token'];
    }

    /**
     * Sets access_token
     *
     * @param string $access_token access_token
     *
     * @return $this
     */
    public function setAccessToken($access_token)
    {
        $this->container['access_token'] = $access_token;

        return $this;
    }

    /**
     * Gets public_address
     *
     * @return string
     */
    public function getPublicAddress()
    {
        return $this->container['public_address'];
    }

    /**
     * Sets public_address
     *
     * @param string $public_address public_address
     *
     * @return $this
     */
    public function setPublicAddress($public_address)
    {
        $this->container['public_address'] = $public_address;

        return $this;
    }

    /**
     * Gets https_required
     *
     * @return bool
     */
    public function getHttpsRequired()
    {
        return $this->container['https_required'];
    }

    /**
     * Sets https_required
     *
     * @param bool $https_required https_required
     *
     * @return $this
     */
    public function setHttpsRequired($https_required)
    {
        $this->container['https_required'] = $https_required;

        return $this;
    }

    /**
     * Gets synced
     *
     * @return bool
     */
    public function getSynced()
    {
        return $this->container['synced'];
    }

    /**
     * Sets synced
     *
     * @param bool $synced synced
     *
     * @return $this
     */
    public function setSynced($synced)
    {
        $this->container['synced'] = $synced;

        return $this;
    }

    /**
     * Gets relay
     *
     * @return bool
     */
    public function getRelay()
    {
        return $this->container['relay'];
    }

    /**
     * Sets relay
     *
     * @param bool $relay relay
     *
     * @return $this
     */
    public function setRelay($relay)
    {
        $this->container['relay'] = $relay;

        return $this;
    }

    /**
     * Gets dns_rebinding_protection
     *
     * @return bool
     */
    public function getDnsRebindingProtection()
    {
        return $this->container['dns_rebinding_protection'];
    }

    /**
     * Sets dns_rebinding_protection
     *
     * @param bool $dns_rebinding_protection dns_rebinding_protection
     *
     * @return $this
     */
    public function setDnsRebindingProtection($dns_rebinding_protection)
    {
        $this->container['dns_rebinding_protection'] = $dns_rebinding_protection;

        return $this;
    }

    /**
     * Gets nat_loopback_supported
     *
     * @return bool
     */
    public function getNatLoopbackSupported()
    {
        return $this->container['nat_loopback_supported'];
    }

    /**
     * Sets nat_loopback_supported
     *
     * @param bool $nat_loopback_supported nat_loopback_supported
     *
     * @return $this
     */
    public function setNatLoopbackSupported($nat_loopback_supported)
    {
        $this->container['nat_loopback_supported'] = $nat_loopback_supported;

        return $this;
    }

    /**
     * Gets public_address_matches
     *
     * @return bool
     */
    public function getPublicAddressMatches()
    {
        return $this->container['public_address_matches'];
    }

    /**
     * Sets public_address_matches
     *
     * @param bool $public_address_matches public_address_matches
     *
     * @return $this
     */
    public function setPublicAddressMatches($public_address_matches)
    {
        $this->container['public_address_matches'] = $public_address_matches;

        return $this;
    }

    /**
     * Gets presence
     *
     * @return bool
     */
    public function getPresence()
    {
        return $this->container['presence'];
    }

    /**
     * Sets presence
     *
     * @param bool $presence presence
     *
     * @return $this
     */
    public function setPresence($presence)
    {
        $this->container['presence'] = $presence;

        return $this;
    }

    /**
     * Gets connection
     *
     * @return \Swagger\Client\Model\PlexConnection[]
     */
    public function getConnection()
    {
        return $this->container['connection'];
    }

    /**
     * Sets connection
     *
     * @param \Swagger\Client\Model\PlexConnection[] $connection connection
     *
     * @return $this
     */
    public function setConnection($connection)
    {
        $this->container['connection'] = $connection;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
