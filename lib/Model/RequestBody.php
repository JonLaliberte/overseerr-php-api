<?php
/**
 * RequestBody
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Overseerr API
 *
 * This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.35
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * RequestBody Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RequestBody implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'request_body';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'media_type' => 'string',
'media_id' => 'float',
'tvdb_id' => 'float',
'seasons' => 'float[]',
'is4k' => 'bool',
'server_id' => 'float',
'profile_id' => 'float',
'root_folder' => 'string',
'language_profile_id' => 'float',
'user_id' => 'float'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'media_type' => null,
'media_id' => null,
'tvdb_id' => null,
'seasons' => null,
'is4k' => null,
'server_id' => null,
'profile_id' => null,
'root_folder' => null,
'language_profile_id' => null,
'user_id' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'media_type' => 'mediaType',
'media_id' => 'mediaId',
'tvdb_id' => 'tvdbId',
'seasons' => 'seasons',
'is4k' => 'is4k',
'server_id' => 'serverId',
'profile_id' => 'profileId',
'root_folder' => 'rootFolder',
'language_profile_id' => 'languageProfileId',
'user_id' => 'userId'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'media_type' => 'setMediaType',
'media_id' => 'setMediaId',
'tvdb_id' => 'setTvdbId',
'seasons' => 'setSeasons',
'is4k' => 'setIs4k',
'server_id' => 'setServerId',
'profile_id' => 'setProfileId',
'root_folder' => 'setRootFolder',
'language_profile_id' => 'setLanguageProfileId',
'user_id' => 'setUserId'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'media_type' => 'getMediaType',
'media_id' => 'getMediaId',
'tvdb_id' => 'getTvdbId',
'seasons' => 'getSeasons',
'is4k' => 'getIs4k',
'server_id' => 'getServerId',
'profile_id' => 'getProfileId',
'root_folder' => 'getRootFolder',
'language_profile_id' => 'getLanguageProfileId',
'user_id' => 'getUserId'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const MEDIA_TYPE_MOVIE = 'movie';
const MEDIA_TYPE_TV = 'tv';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMediaTypeAllowableValues()
    {
        return [
            self::MEDIA_TYPE_MOVIE,
self::MEDIA_TYPE_TV,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['media_type'] = isset($data['media_type']) ? $data['media_type'] : null;
        $this->container['media_id'] = isset($data['media_id']) ? $data['media_id'] : null;
        $this->container['tvdb_id'] = isset($data['tvdb_id']) ? $data['tvdb_id'] : null;
        $this->container['seasons'] = isset($data['seasons']) ? $data['seasons'] : null;
        $this->container['is4k'] = isset($data['is4k']) ? $data['is4k'] : null;
        $this->container['server_id'] = isset($data['server_id']) ? $data['server_id'] : null;
        $this->container['profile_id'] = isset($data['profile_id']) ? $data['profile_id'] : null;
        $this->container['root_folder'] = isset($data['root_folder']) ? $data['root_folder'] : null;
        $this->container['language_profile_id'] = isset($data['language_profile_id']) ? $data['language_profile_id'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['media_type'] === null) {
            $invalidProperties[] = "'media_type' can't be null";
        }
        $allowedValues = $this->getMediaTypeAllowableValues();
        if (!is_null($this->container['media_type']) && !in_array($this->container['media_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'media_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['media_id'] === null) {
            $invalidProperties[] = "'media_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets media_type
     *
     * @return string
     */
    public function getMediaType()
    {
        return $this->container['media_type'];
    }

    /**
     * Sets media_type
     *
     * @param string $media_type media_type
     *
     * @return $this
     */
    public function setMediaType($media_type)
    {
        $allowedValues = $this->getMediaTypeAllowableValues();
        if (!in_array($media_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'media_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['media_type'] = $media_type;

        return $this;
    }

    /**
     * Gets media_id
     *
     * @return float
     */
    public function getMediaId()
    {
        return $this->container['media_id'];
    }

    /**
     * Sets media_id
     *
     * @param float $media_id media_id
     *
     * @return $this
     */
    public function setMediaId($media_id)
    {
        $this->container['media_id'] = $media_id;

        return $this;
    }

    /**
     * Gets tvdb_id
     *
     * @return float
     */
    public function getTvdbId()
    {
        return $this->container['tvdb_id'];
    }

    /**
     * Sets tvdb_id
     *
     * @param float $tvdb_id tvdb_id
     *
     * @return $this
     */
    public function setTvdbId($tvdb_id)
    {
        $this->container['tvdb_id'] = $tvdb_id;

        return $this;
    }

    /**
     * Gets seasons
     *
     * @return float[]
     */
    public function getSeasons()
    {
        return $this->container['seasons'];
    }

    /**
     * Sets seasons
     *
     * @param float[] $seasons seasons
     *
     * @return $this
     */
    public function setSeasons($seasons)
    {
        $this->container['seasons'] = $seasons;

        return $this;
    }

    /**
     * Gets is4k
     *
     * @return bool
     */
    public function getIs4k()
    {
        return $this->container['is4k'];
    }

    /**
     * Sets is4k
     *
     * @param bool $is4k is4k
     *
     * @return $this
     */
    public function setIs4k($is4k)
    {
        $this->container['is4k'] = $is4k;

        return $this;
    }

    /**
     * Gets server_id
     *
     * @return float
     */
    public function getServerId()
    {
        return $this->container['server_id'];
    }

    /**
     * Sets server_id
     *
     * @param float $server_id server_id
     *
     * @return $this
     */
    public function setServerId($server_id)
    {
        $this->container['server_id'] = $server_id;

        return $this;
    }

    /**
     * Gets profile_id
     *
     * @return float
     */
    public function getProfileId()
    {
        return $this->container['profile_id'];
    }

    /**
     * Sets profile_id
     *
     * @param float $profile_id profile_id
     *
     * @return $this
     */
    public function setProfileId($profile_id)
    {
        $this->container['profile_id'] = $profile_id;

        return $this;
    }

    /**
     * Gets root_folder
     *
     * @return string
     */
    public function getRootFolder()
    {
        return $this->container['root_folder'];
    }

    /**
     * Sets root_folder
     *
     * @param string $root_folder root_folder
     *
     * @return $this
     */
    public function setRootFolder($root_folder)
    {
        $this->container['root_folder'] = $root_folder;

        return $this;
    }

    /**
     * Gets language_profile_id
     *
     * @return float
     */
    public function getLanguageProfileId()
    {
        return $this->container['language_profile_id'];
    }

    /**
     * Sets language_profile_id
     *
     * @param float $language_profile_id language_profile_id
     *
     * @return $this
     */
    public function setLanguageProfileId($language_profile_id)
    {
        $this->container['language_profile_id'] = $language_profile_id;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return float
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param float $user_id user_id
     *
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
