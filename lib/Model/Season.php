<?php
/**
 * Season
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Overseerr API
 *
 * This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.35
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Season Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Season implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Season';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'float',
'air_date' => 'string',
'episode_count' => 'float',
'name' => 'string',
'overview' => 'string',
'poster_path' => 'string',
'season_number' => 'float',
'episodes' => '\Swagger\Client\Model\Episode[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'air_date' => null,
'episode_count' => null,
'name' => null,
'overview' => null,
'poster_path' => null,
'season_number' => null,
'episodes' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'air_date' => 'airDate',
'episode_count' => 'episodeCount',
'name' => 'name',
'overview' => 'overview',
'poster_path' => 'posterPath',
'season_number' => 'seasonNumber',
'episodes' => 'episodes'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'air_date' => 'setAirDate',
'episode_count' => 'setEpisodeCount',
'name' => 'setName',
'overview' => 'setOverview',
'poster_path' => 'setPosterPath',
'season_number' => 'setSeasonNumber',
'episodes' => 'setEpisodes'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'air_date' => 'getAirDate',
'episode_count' => 'getEpisodeCount',
'name' => 'getName',
'overview' => 'getOverview',
'poster_path' => 'getPosterPath',
'season_number' => 'getSeasonNumber',
'episodes' => 'getEpisodes'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['air_date'] = isset($data['air_date']) ? $data['air_date'] : null;
        $this->container['episode_count'] = isset($data['episode_count']) ? $data['episode_count'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['overview'] = isset($data['overview']) ? $data['overview'] : null;
        $this->container['poster_path'] = isset($data['poster_path']) ? $data['poster_path'] : null;
        $this->container['season_number'] = isset($data['season_number']) ? $data['season_number'] : null;
        $this->container['episodes'] = isset($data['episodes']) ? $data['episodes'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return float
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param float $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets air_date
     *
     * @return string
     */
    public function getAirDate()
    {
        return $this->container['air_date'];
    }

    /**
     * Sets air_date
     *
     * @param string $air_date air_date
     *
     * @return $this
     */
    public function setAirDate($air_date)
    {
        $this->container['air_date'] = $air_date;

        return $this;
    }

    /**
     * Gets episode_count
     *
     * @return float
     */
    public function getEpisodeCount()
    {
        return $this->container['episode_count'];
    }

    /**
     * Sets episode_count
     *
     * @param float $episode_count episode_count
     *
     * @return $this
     */
    public function setEpisodeCount($episode_count)
    {
        $this->container['episode_count'] = $episode_count;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets overview
     *
     * @return string
     */
    public function getOverview()
    {
        return $this->container['overview'];
    }

    /**
     * Sets overview
     *
     * @param string $overview overview
     *
     * @return $this
     */
    public function setOverview($overview)
    {
        $this->container['overview'] = $overview;

        return $this;
    }

    /**
     * Gets poster_path
     *
     * @return string
     */
    public function getPosterPath()
    {
        return $this->container['poster_path'];
    }

    /**
     * Sets poster_path
     *
     * @param string $poster_path poster_path
     *
     * @return $this
     */
    public function setPosterPath($poster_path)
    {
        $this->container['poster_path'] = $poster_path;

        return $this;
    }

    /**
     * Gets season_number
     *
     * @return float
     */
    public function getSeasonNumber()
    {
        return $this->container['season_number'];
    }

    /**
     * Sets season_number
     *
     * @param float $season_number season_number
     *
     * @return $this
     */
    public function setSeasonNumber($season_number)
    {
        $this->container['season_number'] = $season_number;

        return $this;
    }

    /**
     * Gets episodes
     *
     * @return \Swagger\Client\Model\Episode[]
     */
    public function getEpisodes()
    {
        return $this->container['episodes'];
    }

    /**
     * Sets episodes
     *
     * @param \Swagger\Client\Model\Episode[] $episodes episodes
     *
     * @return $this
     */
    public function setEpisodes($episodes)
    {
        $this->container['episodes'] = $episodes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
