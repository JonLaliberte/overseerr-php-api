<?php
/**
 * NotificationEmailSettingsOptions
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Overseerr API
 *
 * This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.35
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * NotificationEmailSettingsOptions Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class NotificationEmailSettingsOptions implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'NotificationEmailSettings_options';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'email_from' => 'string',
'sender_name' => 'string',
'smtp_host' => 'string',
'smtp_port' => 'float',
'secure' => 'bool',
'ignore_tls' => 'bool',
'require_tls' => 'bool',
'auth_user' => 'string',
'auth_pass' => 'string',
'allow_self_signed' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'email_from' => null,
'sender_name' => null,
'smtp_host' => null,
'smtp_port' => null,
'secure' => null,
'ignore_tls' => null,
'require_tls' => null,
'auth_user' => null,
'auth_pass' => null,
'allow_self_signed' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'email_from' => 'emailFrom',
'sender_name' => 'senderName',
'smtp_host' => 'smtpHost',
'smtp_port' => 'smtpPort',
'secure' => 'secure',
'ignore_tls' => 'ignoreTls',
'require_tls' => 'requireTls',
'auth_user' => 'authUser',
'auth_pass' => 'authPass',
'allow_self_signed' => 'allowSelfSigned'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'email_from' => 'setEmailFrom',
'sender_name' => 'setSenderName',
'smtp_host' => 'setSmtpHost',
'smtp_port' => 'setSmtpPort',
'secure' => 'setSecure',
'ignore_tls' => 'setIgnoreTls',
'require_tls' => 'setRequireTls',
'auth_user' => 'setAuthUser',
'auth_pass' => 'setAuthPass',
'allow_self_signed' => 'setAllowSelfSigned'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'email_from' => 'getEmailFrom',
'sender_name' => 'getSenderName',
'smtp_host' => 'getSmtpHost',
'smtp_port' => 'getSmtpPort',
'secure' => 'getSecure',
'ignore_tls' => 'getIgnoreTls',
'require_tls' => 'getRequireTls',
'auth_user' => 'getAuthUser',
'auth_pass' => 'getAuthPass',
'allow_self_signed' => 'getAllowSelfSigned'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['email_from'] = isset($data['email_from']) ? $data['email_from'] : null;
        $this->container['sender_name'] = isset($data['sender_name']) ? $data['sender_name'] : null;
        $this->container['smtp_host'] = isset($data['smtp_host']) ? $data['smtp_host'] : null;
        $this->container['smtp_port'] = isset($data['smtp_port']) ? $data['smtp_port'] : null;
        $this->container['secure'] = isset($data['secure']) ? $data['secure'] : null;
        $this->container['ignore_tls'] = isset($data['ignore_tls']) ? $data['ignore_tls'] : null;
        $this->container['require_tls'] = isset($data['require_tls']) ? $data['require_tls'] : null;
        $this->container['auth_user'] = isset($data['auth_user']) ? $data['auth_user'] : null;
        $this->container['auth_pass'] = isset($data['auth_pass']) ? $data['auth_pass'] : null;
        $this->container['allow_self_signed'] = isset($data['allow_self_signed']) ? $data['allow_self_signed'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets email_from
     *
     * @return string
     */
    public function getEmailFrom()
    {
        return $this->container['email_from'];
    }

    /**
     * Sets email_from
     *
     * @param string $email_from email_from
     *
     * @return $this
     */
    public function setEmailFrom($email_from)
    {
        $this->container['email_from'] = $email_from;

        return $this;
    }

    /**
     * Gets sender_name
     *
     * @return string
     */
    public function getSenderName()
    {
        return $this->container['sender_name'];
    }

    /**
     * Sets sender_name
     *
     * @param string $sender_name sender_name
     *
     * @return $this
     */
    public function setSenderName($sender_name)
    {
        $this->container['sender_name'] = $sender_name;

        return $this;
    }

    /**
     * Gets smtp_host
     *
     * @return string
     */
    public function getSmtpHost()
    {
        return $this->container['smtp_host'];
    }

    /**
     * Sets smtp_host
     *
     * @param string $smtp_host smtp_host
     *
     * @return $this
     */
    public function setSmtpHost($smtp_host)
    {
        $this->container['smtp_host'] = $smtp_host;

        return $this;
    }

    /**
     * Gets smtp_port
     *
     * @return float
     */
    public function getSmtpPort()
    {
        return $this->container['smtp_port'];
    }

    /**
     * Sets smtp_port
     *
     * @param float $smtp_port smtp_port
     *
     * @return $this
     */
    public function setSmtpPort($smtp_port)
    {
        $this->container['smtp_port'] = $smtp_port;

        return $this;
    }

    /**
     * Gets secure
     *
     * @return bool
     */
    public function getSecure()
    {
        return $this->container['secure'];
    }

    /**
     * Sets secure
     *
     * @param bool $secure secure
     *
     * @return $this
     */
    public function setSecure($secure)
    {
        $this->container['secure'] = $secure;

        return $this;
    }

    /**
     * Gets ignore_tls
     *
     * @return bool
     */
    public function getIgnoreTls()
    {
        return $this->container['ignore_tls'];
    }

    /**
     * Sets ignore_tls
     *
     * @param bool $ignore_tls ignore_tls
     *
     * @return $this
     */
    public function setIgnoreTls($ignore_tls)
    {
        $this->container['ignore_tls'] = $ignore_tls;

        return $this;
    }

    /**
     * Gets require_tls
     *
     * @return bool
     */
    public function getRequireTls()
    {
        return $this->container['require_tls'];
    }

    /**
     * Sets require_tls
     *
     * @param bool $require_tls require_tls
     *
     * @return $this
     */
    public function setRequireTls($require_tls)
    {
        $this->container['require_tls'] = $require_tls;

        return $this;
    }

    /**
     * Gets auth_user
     *
     * @return string
     */
    public function getAuthUser()
    {
        return $this->container['auth_user'];
    }

    /**
     * Sets auth_user
     *
     * @param string $auth_user auth_user
     *
     * @return $this
     */
    public function setAuthUser($auth_user)
    {
        $this->container['auth_user'] = $auth_user;

        return $this;
    }

    /**
     * Gets auth_pass
     *
     * @return string
     */
    public function getAuthPass()
    {
        return $this->container['auth_pass'];
    }

    /**
     * Sets auth_pass
     *
     * @param string $auth_pass auth_pass
     *
     * @return $this
     */
    public function setAuthPass($auth_pass)
    {
        $this->container['auth_pass'] = $auth_pass;

        return $this;
    }

    /**
     * Gets allow_self_signed
     *
     * @return bool
     */
    public function getAllowSelfSigned()
    {
        return $this->container['allow_self_signed'];
    }

    /**
     * Sets allow_self_signed
     *
     * @param bool $allow_self_signed allow_self_signed
     *
     * @return $this
     */
    public function setAllowSelfSigned($allow_self_signed)
    {
        $this->container['allow_self_signed'] = $allow_self_signed;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
