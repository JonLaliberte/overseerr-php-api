<?php
/**
 * UserSettingsNotifications
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Overseerr API
 *
 * This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.35
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * UserSettingsNotifications Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UserSettingsNotifications implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UserSettingsNotifications';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'notification_types' => '\Swagger\Client\Model\NotificationAgentTypes',
'email_enabled' => 'bool',
'pgp_key' => 'string',
'discord_enabled' => 'bool',
'discord_enabled_types' => 'float',
'discord_id' => 'string',
'pushbullet_access_token' => 'string',
'pushover_application_token' => 'string',
'pushover_user_key' => 'string',
'telegram_enabled' => 'bool',
'telegram_bot_username' => 'string',
'telegram_chat_id' => 'string',
'telegram_send_silently' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'notification_types' => null,
'email_enabled' => null,
'pgp_key' => null,
'discord_enabled' => null,
'discord_enabled_types' => null,
'discord_id' => null,
'pushbullet_access_token' => null,
'pushover_application_token' => null,
'pushover_user_key' => null,
'telegram_enabled' => null,
'telegram_bot_username' => null,
'telegram_chat_id' => null,
'telegram_send_silently' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'notification_types' => 'notificationTypes',
'email_enabled' => 'emailEnabled',
'pgp_key' => 'pgpKey',
'discord_enabled' => 'discordEnabled',
'discord_enabled_types' => 'discordEnabledTypes',
'discord_id' => 'discordId',
'pushbullet_access_token' => 'pushbulletAccessToken',
'pushover_application_token' => 'pushoverApplicationToken',
'pushover_user_key' => 'pushoverUserKey',
'telegram_enabled' => 'telegramEnabled',
'telegram_bot_username' => 'telegramBotUsername',
'telegram_chat_id' => 'telegramChatId',
'telegram_send_silently' => 'telegramSendSilently'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'notification_types' => 'setNotificationTypes',
'email_enabled' => 'setEmailEnabled',
'pgp_key' => 'setPgpKey',
'discord_enabled' => 'setDiscordEnabled',
'discord_enabled_types' => 'setDiscordEnabledTypes',
'discord_id' => 'setDiscordId',
'pushbullet_access_token' => 'setPushbulletAccessToken',
'pushover_application_token' => 'setPushoverApplicationToken',
'pushover_user_key' => 'setPushoverUserKey',
'telegram_enabled' => 'setTelegramEnabled',
'telegram_bot_username' => 'setTelegramBotUsername',
'telegram_chat_id' => 'setTelegramChatId',
'telegram_send_silently' => 'setTelegramSendSilently'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'notification_types' => 'getNotificationTypes',
'email_enabled' => 'getEmailEnabled',
'pgp_key' => 'getPgpKey',
'discord_enabled' => 'getDiscordEnabled',
'discord_enabled_types' => 'getDiscordEnabledTypes',
'discord_id' => 'getDiscordId',
'pushbullet_access_token' => 'getPushbulletAccessToken',
'pushover_application_token' => 'getPushoverApplicationToken',
'pushover_user_key' => 'getPushoverUserKey',
'telegram_enabled' => 'getTelegramEnabled',
'telegram_bot_username' => 'getTelegramBotUsername',
'telegram_chat_id' => 'getTelegramChatId',
'telegram_send_silently' => 'getTelegramSendSilently'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['notification_types'] = isset($data['notification_types']) ? $data['notification_types'] : null;
        $this->container['email_enabled'] = isset($data['email_enabled']) ? $data['email_enabled'] : null;
        $this->container['pgp_key'] = isset($data['pgp_key']) ? $data['pgp_key'] : null;
        $this->container['discord_enabled'] = isset($data['discord_enabled']) ? $data['discord_enabled'] : null;
        $this->container['discord_enabled_types'] = isset($data['discord_enabled_types']) ? $data['discord_enabled_types'] : null;
        $this->container['discord_id'] = isset($data['discord_id']) ? $data['discord_id'] : null;
        $this->container['pushbullet_access_token'] = isset($data['pushbullet_access_token']) ? $data['pushbullet_access_token'] : null;
        $this->container['pushover_application_token'] = isset($data['pushover_application_token']) ? $data['pushover_application_token'] : null;
        $this->container['pushover_user_key'] = isset($data['pushover_user_key']) ? $data['pushover_user_key'] : null;
        $this->container['telegram_enabled'] = isset($data['telegram_enabled']) ? $data['telegram_enabled'] : null;
        $this->container['telegram_bot_username'] = isset($data['telegram_bot_username']) ? $data['telegram_bot_username'] : null;
        $this->container['telegram_chat_id'] = isset($data['telegram_chat_id']) ? $data['telegram_chat_id'] : null;
        $this->container['telegram_send_silently'] = isset($data['telegram_send_silently']) ? $data['telegram_send_silently'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets notification_types
     *
     * @return \Swagger\Client\Model\NotificationAgentTypes
     */
    public function getNotificationTypes()
    {
        return $this->container['notification_types'];
    }

    /**
     * Sets notification_types
     *
     * @param \Swagger\Client\Model\NotificationAgentTypes $notification_types notification_types
     *
     * @return $this
     */
    public function setNotificationTypes($notification_types)
    {
        $this->container['notification_types'] = $notification_types;

        return $this;
    }

    /**
     * Gets email_enabled
     *
     * @return bool
     */
    public function getEmailEnabled()
    {
        return $this->container['email_enabled'];
    }

    /**
     * Sets email_enabled
     *
     * @param bool $email_enabled email_enabled
     *
     * @return $this
     */
    public function setEmailEnabled($email_enabled)
    {
        $this->container['email_enabled'] = $email_enabled;

        return $this;
    }

    /**
     * Gets pgp_key
     *
     * @return string
     */
    public function getPgpKey()
    {
        return $this->container['pgp_key'];
    }

    /**
     * Sets pgp_key
     *
     * @param string $pgp_key pgp_key
     *
     * @return $this
     */
    public function setPgpKey($pgp_key)
    {
        $this->container['pgp_key'] = $pgp_key;

        return $this;
    }

    /**
     * Gets discord_enabled
     *
     * @return bool
     */
    public function getDiscordEnabled()
    {
        return $this->container['discord_enabled'];
    }

    /**
     * Sets discord_enabled
     *
     * @param bool $discord_enabled discord_enabled
     *
     * @return $this
     */
    public function setDiscordEnabled($discord_enabled)
    {
        $this->container['discord_enabled'] = $discord_enabled;

        return $this;
    }

    /**
     * Gets discord_enabled_types
     *
     * @return float
     */
    public function getDiscordEnabledTypes()
    {
        return $this->container['discord_enabled_types'];
    }

    /**
     * Sets discord_enabled_types
     *
     * @param float $discord_enabled_types discord_enabled_types
     *
     * @return $this
     */
    public function setDiscordEnabledTypes($discord_enabled_types)
    {
        $this->container['discord_enabled_types'] = $discord_enabled_types;

        return $this;
    }

    /**
     * Gets discord_id
     *
     * @return string
     */
    public function getDiscordId()
    {
        return $this->container['discord_id'];
    }

    /**
     * Sets discord_id
     *
     * @param string $discord_id discord_id
     *
     * @return $this
     */
    public function setDiscordId($discord_id)
    {
        $this->container['discord_id'] = $discord_id;

        return $this;
    }

    /**
     * Gets pushbullet_access_token
     *
     * @return string
     */
    public function getPushbulletAccessToken()
    {
        return $this->container['pushbullet_access_token'];
    }

    /**
     * Sets pushbullet_access_token
     *
     * @param string $pushbullet_access_token pushbullet_access_token
     *
     * @return $this
     */
    public function setPushbulletAccessToken($pushbullet_access_token)
    {
        $this->container['pushbullet_access_token'] = $pushbullet_access_token;

        return $this;
    }

    /**
     * Gets pushover_application_token
     *
     * @return string
     */
    public function getPushoverApplicationToken()
    {
        return $this->container['pushover_application_token'];
    }

    /**
     * Sets pushover_application_token
     *
     * @param string $pushover_application_token pushover_application_token
     *
     * @return $this
     */
    public function setPushoverApplicationToken($pushover_application_token)
    {
        $this->container['pushover_application_token'] = $pushover_application_token;

        return $this;
    }

    /**
     * Gets pushover_user_key
     *
     * @return string
     */
    public function getPushoverUserKey()
    {
        return $this->container['pushover_user_key'];
    }

    /**
     * Sets pushover_user_key
     *
     * @param string $pushover_user_key pushover_user_key
     *
     * @return $this
     */
    public function setPushoverUserKey($pushover_user_key)
    {
        $this->container['pushover_user_key'] = $pushover_user_key;

        return $this;
    }

    /**
     * Gets telegram_enabled
     *
     * @return bool
     */
    public function getTelegramEnabled()
    {
        return $this->container['telegram_enabled'];
    }

    /**
     * Sets telegram_enabled
     *
     * @param bool $telegram_enabled telegram_enabled
     *
     * @return $this
     */
    public function setTelegramEnabled($telegram_enabled)
    {
        $this->container['telegram_enabled'] = $telegram_enabled;

        return $this;
    }

    /**
     * Gets telegram_bot_username
     *
     * @return string
     */
    public function getTelegramBotUsername()
    {
        return $this->container['telegram_bot_username'];
    }

    /**
     * Sets telegram_bot_username
     *
     * @param string $telegram_bot_username telegram_bot_username
     *
     * @return $this
     */
    public function setTelegramBotUsername($telegram_bot_username)
    {
        $this->container['telegram_bot_username'] = $telegram_bot_username;

        return $this;
    }

    /**
     * Gets telegram_chat_id
     *
     * @return string
     */
    public function getTelegramChatId()
    {
        return $this->container['telegram_chat_id'];
    }

    /**
     * Sets telegram_chat_id
     *
     * @param string $telegram_chat_id telegram_chat_id
     *
     * @return $this
     */
    public function setTelegramChatId($telegram_chat_id)
    {
        $this->container['telegram_chat_id'] = $telegram_chat_id;

        return $this;
    }

    /**
     * Gets telegram_send_silently
     *
     * @return bool
     */
    public function getTelegramSendSilently()
    {
        return $this->container['telegram_send_silently'];
    }

    /**
     * Sets telegram_send_silently
     *
     * @param bool $telegram_send_silently telegram_send_silently
     *
     * @return $this
     */
    public function setTelegramSendSilently($telegram_send_silently)
    {
        $this->container['telegram_send_silently'] = $telegram_send_silently;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
