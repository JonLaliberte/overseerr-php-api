<?php
/**
 * TvResult
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Overseerr API
 *
 * This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.35
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TvResult Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TvResult implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TvResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'float',
'media_type' => 'string',
'popularity' => 'float',
'poster_path' => 'string',
'backdrop_path' => 'string',
'vote_count' => 'float',
'vote_average' => 'float',
'genre_ids' => 'float[]',
'overview' => 'string',
'original_language' => 'string',
'name' => 'string',
'original_name' => 'string',
'origin_country' => 'string[]',
'first_air_date' => 'string',
'media_info' => '\Swagger\Client\Model\MediaInfo'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'media_type' => null,
'popularity' => null,
'poster_path' => null,
'backdrop_path' => null,
'vote_count' => null,
'vote_average' => null,
'genre_ids' => null,
'overview' => null,
'original_language' => null,
'name' => null,
'original_name' => null,
'origin_country' => null,
'first_air_date' => null,
'media_info' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'media_type' => 'mediaType',
'popularity' => 'popularity',
'poster_path' => 'posterPath',
'backdrop_path' => 'backdropPath',
'vote_count' => 'voteCount',
'vote_average' => 'voteAverage',
'genre_ids' => 'genreIds',
'overview' => 'overview',
'original_language' => 'originalLanguage',
'name' => 'name',
'original_name' => 'originalName',
'origin_country' => 'originCountry',
'first_air_date' => 'firstAirDate',
'media_info' => 'mediaInfo'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'media_type' => 'setMediaType',
'popularity' => 'setPopularity',
'poster_path' => 'setPosterPath',
'backdrop_path' => 'setBackdropPath',
'vote_count' => 'setVoteCount',
'vote_average' => 'setVoteAverage',
'genre_ids' => 'setGenreIds',
'overview' => 'setOverview',
'original_language' => 'setOriginalLanguage',
'name' => 'setName',
'original_name' => 'setOriginalName',
'origin_country' => 'setOriginCountry',
'first_air_date' => 'setFirstAirDate',
'media_info' => 'setMediaInfo'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'media_type' => 'getMediaType',
'popularity' => 'getPopularity',
'poster_path' => 'getPosterPath',
'backdrop_path' => 'getBackdropPath',
'vote_count' => 'getVoteCount',
'vote_average' => 'getVoteAverage',
'genre_ids' => 'getGenreIds',
'overview' => 'getOverview',
'original_language' => 'getOriginalLanguage',
'name' => 'getName',
'original_name' => 'getOriginalName',
'origin_country' => 'getOriginCountry',
'first_air_date' => 'getFirstAirDate',
'media_info' => 'getMediaInfo'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['media_type'] = isset($data['media_type']) ? $data['media_type'] : null;
        $this->container['popularity'] = isset($data['popularity']) ? $data['popularity'] : null;
        $this->container['poster_path'] = isset($data['poster_path']) ? $data['poster_path'] : null;
        $this->container['backdrop_path'] = isset($data['backdrop_path']) ? $data['backdrop_path'] : null;
        $this->container['vote_count'] = isset($data['vote_count']) ? $data['vote_count'] : null;
        $this->container['vote_average'] = isset($data['vote_average']) ? $data['vote_average'] : null;
        $this->container['genre_ids'] = isset($data['genre_ids']) ? $data['genre_ids'] : null;
        $this->container['overview'] = isset($data['overview']) ? $data['overview'] : null;
        $this->container['original_language'] = isset($data['original_language']) ? $data['original_language'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['original_name'] = isset($data['original_name']) ? $data['original_name'] : null;
        $this->container['origin_country'] = isset($data['origin_country']) ? $data['origin_country'] : null;
        $this->container['first_air_date'] = isset($data['first_air_date']) ? $data['first_air_date'] : null;
        $this->container['media_info'] = isset($data['media_info']) ? $data['media_info'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return float
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param float $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets media_type
     *
     * @return string
     */
    public function getMediaType()
    {
        return $this->container['media_type'];
    }

    /**
     * Sets media_type
     *
     * @param string $media_type media_type
     *
     * @return $this
     */
    public function setMediaType($media_type)
    {
        $this->container['media_type'] = $media_type;

        return $this;
    }

    /**
     * Gets popularity
     *
     * @return float
     */
    public function getPopularity()
    {
        return $this->container['popularity'];
    }

    /**
     * Sets popularity
     *
     * @param float $popularity popularity
     *
     * @return $this
     */
    public function setPopularity($popularity)
    {
        $this->container['popularity'] = $popularity;

        return $this;
    }

    /**
     * Gets poster_path
     *
     * @return string
     */
    public function getPosterPath()
    {
        return $this->container['poster_path'];
    }

    /**
     * Sets poster_path
     *
     * @param string $poster_path poster_path
     *
     * @return $this
     */
    public function setPosterPath($poster_path)
    {
        $this->container['poster_path'] = $poster_path;

        return $this;
    }

    /**
     * Gets backdrop_path
     *
     * @return string
     */
    public function getBackdropPath()
    {
        return $this->container['backdrop_path'];
    }

    /**
     * Sets backdrop_path
     *
     * @param string $backdrop_path backdrop_path
     *
     * @return $this
     */
    public function setBackdropPath($backdrop_path)
    {
        $this->container['backdrop_path'] = $backdrop_path;

        return $this;
    }

    /**
     * Gets vote_count
     *
     * @return float
     */
    public function getVoteCount()
    {
        return $this->container['vote_count'];
    }

    /**
     * Sets vote_count
     *
     * @param float $vote_count vote_count
     *
     * @return $this
     */
    public function setVoteCount($vote_count)
    {
        $this->container['vote_count'] = $vote_count;

        return $this;
    }

    /**
     * Gets vote_average
     *
     * @return float
     */
    public function getVoteAverage()
    {
        return $this->container['vote_average'];
    }

    /**
     * Sets vote_average
     *
     * @param float $vote_average vote_average
     *
     * @return $this
     */
    public function setVoteAverage($vote_average)
    {
        $this->container['vote_average'] = $vote_average;

        return $this;
    }

    /**
     * Gets genre_ids
     *
     * @return float[]
     */
    public function getGenreIds()
    {
        return $this->container['genre_ids'];
    }

    /**
     * Sets genre_ids
     *
     * @param float[] $genre_ids genre_ids
     *
     * @return $this
     */
    public function setGenreIds($genre_ids)
    {
        $this->container['genre_ids'] = $genre_ids;

        return $this;
    }

    /**
     * Gets overview
     *
     * @return string
     */
    public function getOverview()
    {
        return $this->container['overview'];
    }

    /**
     * Sets overview
     *
     * @param string $overview overview
     *
     * @return $this
     */
    public function setOverview($overview)
    {
        $this->container['overview'] = $overview;

        return $this;
    }

    /**
     * Gets original_language
     *
     * @return string
     */
    public function getOriginalLanguage()
    {
        return $this->container['original_language'];
    }

    /**
     * Sets original_language
     *
     * @param string $original_language original_language
     *
     * @return $this
     */
    public function setOriginalLanguage($original_language)
    {
        $this->container['original_language'] = $original_language;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets original_name
     *
     * @return string
     */
    public function getOriginalName()
    {
        return $this->container['original_name'];
    }

    /**
     * Sets original_name
     *
     * @param string $original_name original_name
     *
     * @return $this
     */
    public function setOriginalName($original_name)
    {
        $this->container['original_name'] = $original_name;

        return $this;
    }

    /**
     * Gets origin_country
     *
     * @return string[]
     */
    public function getOriginCountry()
    {
        return $this->container['origin_country'];
    }

    /**
     * Sets origin_country
     *
     * @param string[] $origin_country origin_country
     *
     * @return $this
     */
    public function setOriginCountry($origin_country)
    {
        $this->container['origin_country'] = $origin_country;

        return $this;
    }

    /**
     * Gets first_air_date
     *
     * @return string
     */
    public function getFirstAirDate()
    {
        return $this->container['first_air_date'];
    }

    /**
     * Sets first_air_date
     *
     * @param string $first_air_date first_air_date
     *
     * @return $this
     */
    public function setFirstAirDate($first_air_date)
    {
        $this->container['first_air_date'] = $first_air_date;

        return $this;
    }

    /**
     * Gets media_info
     *
     * @return \Swagger\Client\Model\MediaInfo
     */
    public function getMediaInfo()
    {
        return $this->container['media_info'];
    }

    /**
     * Sets media_info
     *
     * @param \Swagger\Client\Model\MediaInfo $media_info media_info
     *
     * @return $this
     */
    public function setMediaInfo($media_info)
    {
        $this->container['media_info'] = $media_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
