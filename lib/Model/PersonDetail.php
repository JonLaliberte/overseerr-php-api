<?php
/**
 * PersonDetail
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Overseerr API
 *
 * This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.35
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PersonDetail Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PersonDetail implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PersonDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'float',
'name' => 'string',
'deathday' => 'string',
'known_for_department' => 'string',
'also_known_as' => 'string[]',
'gender' => 'string',
'biography' => 'string',
'popularity' => 'string',
'place_of_birth' => 'string',
'profile_path' => 'string',
'adult' => 'bool',
'imdb_id' => 'string',
'homepage' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'name' => null,
'deathday' => null,
'known_for_department' => null,
'also_known_as' => null,
'gender' => null,
'biography' => null,
'popularity' => null,
'place_of_birth' => null,
'profile_path' => null,
'adult' => null,
'imdb_id' => null,
'homepage' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'name' => 'name',
'deathday' => 'deathday',
'known_for_department' => 'knownForDepartment',
'also_known_as' => 'alsoKnownAs',
'gender' => 'gender',
'biography' => 'biography',
'popularity' => 'popularity',
'place_of_birth' => 'placeOfBirth',
'profile_path' => 'profilePath',
'adult' => 'adult',
'imdb_id' => 'imdbId',
'homepage' => 'homepage'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'name' => 'setName',
'deathday' => 'setDeathday',
'known_for_department' => 'setKnownForDepartment',
'also_known_as' => 'setAlsoKnownAs',
'gender' => 'setGender',
'biography' => 'setBiography',
'popularity' => 'setPopularity',
'place_of_birth' => 'setPlaceOfBirth',
'profile_path' => 'setProfilePath',
'adult' => 'setAdult',
'imdb_id' => 'setImdbId',
'homepage' => 'setHomepage'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'name' => 'getName',
'deathday' => 'getDeathday',
'known_for_department' => 'getKnownForDepartment',
'also_known_as' => 'getAlsoKnownAs',
'gender' => 'getGender',
'biography' => 'getBiography',
'popularity' => 'getPopularity',
'place_of_birth' => 'getPlaceOfBirth',
'profile_path' => 'getProfilePath',
'adult' => 'getAdult',
'imdb_id' => 'getImdbId',
'homepage' => 'getHomepage'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['deathday'] = isset($data['deathday']) ? $data['deathday'] : null;
        $this->container['known_for_department'] = isset($data['known_for_department']) ? $data['known_for_department'] : null;
        $this->container['also_known_as'] = isset($data['also_known_as']) ? $data['also_known_as'] : null;
        $this->container['gender'] = isset($data['gender']) ? $data['gender'] : null;
        $this->container['biography'] = isset($data['biography']) ? $data['biography'] : null;
        $this->container['popularity'] = isset($data['popularity']) ? $data['popularity'] : null;
        $this->container['place_of_birth'] = isset($data['place_of_birth']) ? $data['place_of_birth'] : null;
        $this->container['profile_path'] = isset($data['profile_path']) ? $data['profile_path'] : null;
        $this->container['adult'] = isset($data['adult']) ? $data['adult'] : null;
        $this->container['imdb_id'] = isset($data['imdb_id']) ? $data['imdb_id'] : null;
        $this->container['homepage'] = isset($data['homepage']) ? $data['homepage'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return float
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param float $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets deathday
     *
     * @return string
     */
    public function getDeathday()
    {
        return $this->container['deathday'];
    }

    /**
     * Sets deathday
     *
     * @param string $deathday deathday
     *
     * @return $this
     */
    public function setDeathday($deathday)
    {
        $this->container['deathday'] = $deathday;

        return $this;
    }

    /**
     * Gets known_for_department
     *
     * @return string
     */
    public function getKnownForDepartment()
    {
        return $this->container['known_for_department'];
    }

    /**
     * Sets known_for_department
     *
     * @param string $known_for_department known_for_department
     *
     * @return $this
     */
    public function setKnownForDepartment($known_for_department)
    {
        $this->container['known_for_department'] = $known_for_department;

        return $this;
    }

    /**
     * Gets also_known_as
     *
     * @return string[]
     */
    public function getAlsoKnownAs()
    {
        return $this->container['also_known_as'];
    }

    /**
     * Sets also_known_as
     *
     * @param string[] $also_known_as also_known_as
     *
     * @return $this
     */
    public function setAlsoKnownAs($also_known_as)
    {
        $this->container['also_known_as'] = $also_known_as;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string $gender gender
     *
     * @return $this
     */
    public function setGender($gender)
    {
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets biography
     *
     * @return string
     */
    public function getBiography()
    {
        return $this->container['biography'];
    }

    /**
     * Sets biography
     *
     * @param string $biography biography
     *
     * @return $this
     */
    public function setBiography($biography)
    {
        $this->container['biography'] = $biography;

        return $this;
    }

    /**
     * Gets popularity
     *
     * @return string
     */
    public function getPopularity()
    {
        return $this->container['popularity'];
    }

    /**
     * Sets popularity
     *
     * @param string $popularity popularity
     *
     * @return $this
     */
    public function setPopularity($popularity)
    {
        $this->container['popularity'] = $popularity;

        return $this;
    }

    /**
     * Gets place_of_birth
     *
     * @return string
     */
    public function getPlaceOfBirth()
    {
        return $this->container['place_of_birth'];
    }

    /**
     * Sets place_of_birth
     *
     * @param string $place_of_birth place_of_birth
     *
     * @return $this
     */
    public function setPlaceOfBirth($place_of_birth)
    {
        $this->container['place_of_birth'] = $place_of_birth;

        return $this;
    }

    /**
     * Gets profile_path
     *
     * @return string
     */
    public function getProfilePath()
    {
        return $this->container['profile_path'];
    }

    /**
     * Sets profile_path
     *
     * @param string $profile_path profile_path
     *
     * @return $this
     */
    public function setProfilePath($profile_path)
    {
        $this->container['profile_path'] = $profile_path;

        return $this;
    }

    /**
     * Gets adult
     *
     * @return bool
     */
    public function getAdult()
    {
        return $this->container['adult'];
    }

    /**
     * Sets adult
     *
     * @param bool $adult adult
     *
     * @return $this
     */
    public function setAdult($adult)
    {
        $this->container['adult'] = $adult;

        return $this;
    }

    /**
     * Gets imdb_id
     *
     * @return string
     */
    public function getImdbId()
    {
        return $this->container['imdb_id'];
    }

    /**
     * Sets imdb_id
     *
     * @param string $imdb_id imdb_id
     *
     * @return $this
     */
    public function setImdbId($imdb_id)
    {
        $this->container['imdb_id'] = $imdb_id;

        return $this;
    }

    /**
     * Gets homepage
     *
     * @return string
     */
    public function getHomepage()
    {
        return $this->container['homepage'];
    }

    /**
     * Sets homepage
     *
     * @param string $homepage homepage
     *
     * @return $this
     */
    public function setHomepage($homepage)
    {
        $this->container['homepage'] = $homepage;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
