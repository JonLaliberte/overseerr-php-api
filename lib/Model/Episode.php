<?php
/**
 * Episode
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Overseerr API
 *
 * This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.35
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Episode Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Episode implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Episode';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'float',
'name' => 'string',
'air_date' => 'string',
'episode_number' => 'float',
'overview' => 'string',
'production_code' => 'string',
'season_number' => 'float',
'show_id' => 'float',
'still_path' => 'string',
'vote_average' => 'float',
'vote_count' => 'float'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'name' => null,
'air_date' => null,
'episode_number' => null,
'overview' => null,
'production_code' => null,
'season_number' => null,
'show_id' => null,
'still_path' => null,
'vote_average' => null,
'vote_count' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'name' => 'name',
'air_date' => 'airDate',
'episode_number' => 'episodeNumber',
'overview' => 'overview',
'production_code' => 'productionCode',
'season_number' => 'seasonNumber',
'show_id' => 'showId',
'still_path' => 'stillPath',
'vote_average' => 'voteAverage',
'vote_count' => 'voteCount'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'name' => 'setName',
'air_date' => 'setAirDate',
'episode_number' => 'setEpisodeNumber',
'overview' => 'setOverview',
'production_code' => 'setProductionCode',
'season_number' => 'setSeasonNumber',
'show_id' => 'setShowId',
'still_path' => 'setStillPath',
'vote_average' => 'setVoteAverage',
'vote_count' => 'setVoteCount'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'name' => 'getName',
'air_date' => 'getAirDate',
'episode_number' => 'getEpisodeNumber',
'overview' => 'getOverview',
'production_code' => 'getProductionCode',
'season_number' => 'getSeasonNumber',
'show_id' => 'getShowId',
'still_path' => 'getStillPath',
'vote_average' => 'getVoteAverage',
'vote_count' => 'getVoteCount'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['air_date'] = isset($data['air_date']) ? $data['air_date'] : null;
        $this->container['episode_number'] = isset($data['episode_number']) ? $data['episode_number'] : null;
        $this->container['overview'] = isset($data['overview']) ? $data['overview'] : null;
        $this->container['production_code'] = isset($data['production_code']) ? $data['production_code'] : null;
        $this->container['season_number'] = isset($data['season_number']) ? $data['season_number'] : null;
        $this->container['show_id'] = isset($data['show_id']) ? $data['show_id'] : null;
        $this->container['still_path'] = isset($data['still_path']) ? $data['still_path'] : null;
        $this->container['vote_average'] = isset($data['vote_average']) ? $data['vote_average'] : null;
        $this->container['vote_count'] = isset($data['vote_count']) ? $data['vote_count'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return float
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param float $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets air_date
     *
     * @return string
     */
    public function getAirDate()
    {
        return $this->container['air_date'];
    }

    /**
     * Sets air_date
     *
     * @param string $air_date air_date
     *
     * @return $this
     */
    public function setAirDate($air_date)
    {
        $this->container['air_date'] = $air_date;

        return $this;
    }

    /**
     * Gets episode_number
     *
     * @return float
     */
    public function getEpisodeNumber()
    {
        return $this->container['episode_number'];
    }

    /**
     * Sets episode_number
     *
     * @param float $episode_number episode_number
     *
     * @return $this
     */
    public function setEpisodeNumber($episode_number)
    {
        $this->container['episode_number'] = $episode_number;

        return $this;
    }

    /**
     * Gets overview
     *
     * @return string
     */
    public function getOverview()
    {
        return $this->container['overview'];
    }

    /**
     * Sets overview
     *
     * @param string $overview overview
     *
     * @return $this
     */
    public function setOverview($overview)
    {
        $this->container['overview'] = $overview;

        return $this;
    }

    /**
     * Gets production_code
     *
     * @return string
     */
    public function getProductionCode()
    {
        return $this->container['production_code'];
    }

    /**
     * Sets production_code
     *
     * @param string $production_code production_code
     *
     * @return $this
     */
    public function setProductionCode($production_code)
    {
        $this->container['production_code'] = $production_code;

        return $this;
    }

    /**
     * Gets season_number
     *
     * @return float
     */
    public function getSeasonNumber()
    {
        return $this->container['season_number'];
    }

    /**
     * Sets season_number
     *
     * @param float $season_number season_number
     *
     * @return $this
     */
    public function setSeasonNumber($season_number)
    {
        $this->container['season_number'] = $season_number;

        return $this;
    }

    /**
     * Gets show_id
     *
     * @return float
     */
    public function getShowId()
    {
        return $this->container['show_id'];
    }

    /**
     * Sets show_id
     *
     * @param float $show_id show_id
     *
     * @return $this
     */
    public function setShowId($show_id)
    {
        $this->container['show_id'] = $show_id;

        return $this;
    }

    /**
     * Gets still_path
     *
     * @return string
     */
    public function getStillPath()
    {
        return $this->container['still_path'];
    }

    /**
     * Sets still_path
     *
     * @param string $still_path still_path
     *
     * @return $this
     */
    public function setStillPath($still_path)
    {
        $this->container['still_path'] = $still_path;

        return $this;
    }

    /**
     * Gets vote_average
     *
     * @return float
     */
    public function getVoteAverage()
    {
        return $this->container['vote_average'];
    }

    /**
     * Sets vote_average
     *
     * @param float $vote_average vote_average
     *
     * @return $this
     */
    public function setVoteAverage($vote_average)
    {
        $this->container['vote_average'] = $vote_average;

        return $this;
    }

    /**
     * Gets vote_count
     *
     * @return float
     */
    public function getVoteCount()
    {
        return $this->container['vote_count'];
    }

    /**
     * Sets vote_count
     *
     * @param float $vote_count vote_count
     *
     * @return $this
     */
    public function setVoteCount($vote_count)
    {
        $this->container['vote_count'] = $vote_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
